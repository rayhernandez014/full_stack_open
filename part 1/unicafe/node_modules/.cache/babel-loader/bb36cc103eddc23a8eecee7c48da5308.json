{"ast":null,"code":"var _jsxFileName = \"/home/ray/Desktop/Full Stack Open/part 1/unicafe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Give Feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setGood(good + 1),\n      text: \"Good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setBad(bad + 1),\n      text: \"Bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setNeutral(neutral + 1),\n      text: \"Neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      good: good,\n      neutral: neutral,\n      bad: bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c = App;\n\nconst Button = _ref => {\n  let {\n    handleClick,\n    text\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 3\n  }, this);\n};\n\n_c2 = Button;\n\nconst Statistics = _ref2 => {\n  let {\n    good,\n    neutral,\n    bad\n  } = _ref2;\n\n  if (good != 0 || bad != 0 || neutral != 0) {\n    const getAll = () => {\n      return good + neutral + bad;\n    };\n\n    const getAverage = () => {\n      return (good + neutral * 0 + bad * -1) / getAll();\n    };\n\n    const getPosPercentage = () => {\n      return good / getAll() * 100;\n    };\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"Good: \",\n        value: good\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"Neutral: \",\n        value: neutral\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"Bad: \",\n        value: bad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"All: \",\n        value: getAll()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"Average: \",\n        value: getAverage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"Positive: \",\n        value: getPosPercentage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No feedback given\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n};\n\n_c3 = Statistics;\n\nconst StatisticLine = _ref3 => {\n  let {\n    text,\n    value\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [text, value]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c4 = StatisticLine;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"Statistics\");\n$RefreshReg$(_c4, \"StatisticLine\");","map":{"version":3,"sources":["/home/ray/Desktop/Full Stack Open/part 1/unicafe/src/App.js"],"names":["useState","App","good","setGood","neutral","setNeutral","bad","setBad","Button","handleClick","text","Statistics","getAll","getAverage","getPosPercentage","StatisticLine","value"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACM,GAAD,EAAMC,MAAN,IAAgBP,QAAQ,CAAC,CAAD,CAA9B;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAE,MAAMG,OAAO,CAACD,IAAI,GAAG,CAAR,CAAlC;AAA8C,MAAA,IAAI,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAE,MAAMK,MAAM,CAACD,GAAG,GAAG,CAAP,CAAjC;AAA4C,MAAA,IAAI,EAAC;AAAjD;AAAA;AAAA;AAAA;AAAA,YALF,eAME,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAE,MAAMD,UAAU,CAACD,OAAO,GAAG,CAAX,CAArC;AAAoD,MAAA,IAAI,EAAC;AAAzD;AAAA;AAAA;AAAA;AAAA,YANF,eAOE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAEF,IAAlB;AAAwB,MAAA,OAAO,EAAEE,OAAjC;AAA0C,MAAA,GAAG,EAAEE;AAA/C;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA,kBADF;AAYD,CAlBD;;GAAML,G;;KAAAA,G;;AAoBN,MAAMO,MAAM,GAAG;AAAA,MAAC;AAACC,IAAAA,WAAD;AAAcC,IAAAA;AAAd,GAAD;AAAA,sBACb;AAAQ,IAAA,OAAO,EAAED,WAAjB;AAAA,cAA+BC;AAA/B;AAAA;AAAA;AAAA;AAAA,UADa;AAAA,CAAf;;MAAMF,M;;AAIN,MAAMG,UAAU,GAAG,SAA0B;AAAA,MAAzB;AAACT,IAAAA,IAAD;AAAOE,IAAAA,OAAP;AAAgBE,IAAAA;AAAhB,GAAyB;;AAE3C,MAAKJ,IAAI,IAAI,CAAT,IAAgBI,GAAG,IAAI,CAAvB,IAA8BF,OAAO,IAAI,CAA7C,EAAgD;AAEhD,UAAMQ,MAAM,GAAG,MAAM;AACnB,aAAOV,IAAI,GAAGE,OAAP,GAAiBE,GAAxB;AACD,KAFD;;AAIA,UAAMO,UAAU,GAAG,MAAM;AACvB,aAAO,CAACX,IAAI,GAAIE,OAAO,GAAC,CAAhB,GAAsBE,GAAG,GAAC,CAAC,CAA5B,IAAgCM,MAAM,EAA7C;AACD,KAFD;;AAIA,UAAME,gBAAgB,GAAE,MAAM;AAC5B,aAAQZ,IAAI,GAACU,MAAM,EAAZ,GAAgB,GAAvB;AACD,KAFD;;AAIA,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,aAAD;AAAe,QAAA,IAAI,EAAC,QAApB;AAA6B,QAAA,KAAK,EAAEV;AAApC;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE,QAAC,aAAD;AAAe,QAAA,IAAI,EAAC,WAApB;AAAgC,QAAA,KAAK,EAAEE;AAAvC;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,aAAD;AAAe,QAAA,IAAI,EAAC,OAApB;AAA4B,QAAA,KAAK,EAAEE;AAAnC;AAAA;AAAA;AAAA;AAAA,cANF,eAOE,QAAC,aAAD;AAAe,QAAA,IAAI,EAAC,OAApB;AAA4B,QAAA,KAAK,EAAEM,MAAM;AAAzC;AAAA;AAAA;AAAA;AAAA,cAPF,eAQE,QAAC,aAAD;AAAe,QAAA,IAAI,EAAC,WAApB;AAAgC,QAAA,KAAK,EAAEC,UAAU;AAAjD;AAAA;AAAA;AAAA;AAAA,cARF,eASE,QAAC,aAAD;AAAe,QAAA,IAAI,EAAC,YAApB;AAAiC,QAAA,KAAK,EAAEC,gBAAgB;AAAxD;AAAA;AAAA;AAAA;AAAA,cATF;AAAA,oBADF;AAaC,GA3BD,MA4BI;AACF,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA,oBADF;AAUD;AACF,CA1CD;;MAAMH,U;;AA4CN,MAAMI,aAAa,GAAG,SAAmB;AAAA,MAAlB;AAACL,IAAAA,IAAD;AAAOM,IAAAA;AAAP,GAAkB;AACvC,sBACE;AAAA,2BACE;AAAA,iBAAIN,IAAJ,EAAUM,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CAND;;MAAMD,a;AAQN,eAAed,GAAf","sourcesContent":["import { useState } from 'react'\n\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  return (\n    <>\n      <h2>\n        Give Feedback\n      </h2>\n      <Button handleClick={() => setGood(good + 1)} text='Good'/>\n      <Button handleClick={() => setBad(bad + 1)} text='Bad'/>\n      <Button handleClick={() => setNeutral(neutral + 1)} text='Neutral'/>\n      <Statistics good={good} neutral={neutral} bad={bad} />\n    </>\n  )\n\n}\n\nconst Button = ({handleClick, text}) => (\n  <button onClick={handleClick}>{text}</button>\n)\n\nconst Statistics = ({good, neutral, bad}) => {\n\n  if ((good != 0) || (bad != 0) || (neutral != 0)){\n  \n  const getAll = () => {\n    return good + neutral + bad\n  }\n\n  const getAverage = () => {\n    return (good + (neutral*0) + (bad*-1))/getAll()\n  }\n\n  const getPosPercentage= () => {\n    return (good/getAll())*100\n  }\n\n  return (\n    <>\n      <h2>\n        Statistics\n      </h2>\n      <StatisticLine text='Good: ' value={good}/>\n      <StatisticLine text='Neutral: ' value={neutral}/>\n      <StatisticLine text='Bad: ' value={bad}/>\n      <StatisticLine text='All: ' value={getAll()}/>\n      <StatisticLine text='Average: ' value={getAverage()}/>\n      <StatisticLine text='Positive: ' value={getPosPercentage()}/>\n    </>\n  )\n  }\n  else{\n    return (\n      <>\n        <h2>\n          Statistics\n        </h2>\n        <p>\n          No feedback given\n        </p>\n      </>\n    )\n  }\n}\n\nconst StatisticLine = ({text, value}) => {\n  return (\n    <>\n      <p>{text}{value}</p>\n    </>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}